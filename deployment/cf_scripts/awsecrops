#!/bin/bash -e


MIN_AWS_VERSION="1.10.62"


SETTINGS=$2
if [ "${SETTINGS}x" != "x" ]; then
  source ${SETTINGS}
fi


NODE_ECR_LABEL=${NODE_ECR_LABEL:-"latest"}
HAPROXY_ECR_LABEL=${HAPROXY_ECR_LABEL:-"latest"}
AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-"us-east-1"}


function help {
 echo -e "\
  Usage:
    
    ./awsecrops <command> [settings file]

  Commands:
    buildnpush   : create ECR repositories or uses existing
                     build docker images and push them to ECR
    cleanup      : remove ECR repositories
    help         : this message

  Settings file of form:
    export VAR_NAME=VAR_VALUE

  Variables:
    Without defaults:
      NODE_ECR_NAME
      HAPROXY_ECR_NAME

    With defaults:
      HAPROXY_ECR_LABEL     -> latest
      NODE_ECR_LABEL        -> latest
      AWS_DEFAULT_REGION    -> us-east-1

    You can pass these variables throw env or settings file or mixed.
"
  exit 0
}


AWS=$(which aws) || true
function _check_awscli {

  function print_error {
    echo -e "
-- ERROR: 'awscli' is not installed or it's version is too old.
          You can install or upgrade it with 'pip' (python package manager):
            sudo pip install -U awscli
   Exit."
  }

  if [ "${AWS}x" == "x" ]; then
    print_error
    exit 1
  fi

  CURRENT_AWS_VERSION="$($AWS --version 2>&1 | awk -F " " {'print $1'} | awk -F "/" {'print $2'})"
  OLDER_VERSION="$(echo -e "${MIN_AWS_VERSION}\n${CURRENT_AWS_VERSION}" | sort -h | head -n1)"
  if [ ${OLDER_VERSION} != ${MIN_AWS_VERSION} ]; then
    print_error
    exit 1
  fi
}

DOCKER=$(which docker) || true
function _check_docker {
  if [ "${DOCKER}x" == "x" ]; then
    echo -e "
-- ERROR: 'docker' is not installed. Exit."
    exit 1
  fi
}

function _check_vars {
  IS_FAILED=false
  for var in HAPROXY_ECR_NAME NODE_ECR_NAME; do
    if [ $(env | grep -w $var | wc -l) == "0" ]; then
      IS_FAILED=true
      echo "-- ERROR: '${var}' variable is not set."
    fi
  done
  if $IS_FAILED; then
    echo "Exit."
    exit 1
  fi
}


function _finita {
  echo -e "\n
#########################################################

++ FINITA

#########################################################
\n"
}


function buildnpush {
  _check_vars
  _check_awscli
  _check_docker

  echo -e "
===============================================
:: Creating ${HAPROXY_ECR_NAME} and ${NODE_ECR_NAME} ECR repositories ...
===============================================\n\n"
  sleep 5

  $AWS ecr create-repository --repository-name $NODE_ECR_NAME --region ${AWS_DEFAULT_REGION}|| true
  NODE_ECR_URI=$($AWS --output json ecr describe-repositories --repository-name $NODE_ECR_NAME --region ${AWS_DEFAULT_REGION} | grep repositoryUri | awk -F ": " {'print $2'} | sed 's/"//g' | sed 's/,//g')

  $AWS ecr create-repository --repository-name $HAPROXY_ECR_NAME --region ${AWS_DEFAULT_REGION}|| true
  HAPROXY_ECR_URI=$($AWS --output json ecr describe-repositories --repository-name $HAPROXY_ECR_NAME --region ${AWS_DEFAULT_REGION}| grep repositoryUri | awk -F ": " {'print $2'} | sed 's/"//g' | sed 's/,//g')


  echo -e "
===============================================
:: Building ${NODE_ECR_NAME} docker image
   ${NODE_ECR_URI}:${NODE_ECR_LABEL} ...
===============================================\n\n"
  sleep 5

  pushd $(dirname $0)/../../
    $DOCKER build -t $NODE_ECR_URI:${NODE_ECR_LABEL} .
  popd


  echo -e "
===============================================
:: Building ${HAPROXY_ECR_NAME} docker image
   ${HAPROXY_ECR_URI}:${HAPROXY_ECR_LABEL} ...
===============================================\n\n"
  sleep 5

  pushd $(dirname $0)/../haproxy_docker/
    $DOCKER build -t $HAPROXY_ECR_URI:${HAPROXY_ECR_LABEL} .
  popd


  echo -e "
===============================================
:: Pushing ${HAPROXY_ECR_NAME} and ${NODE_ECR_NAME} docker images to ECR
   ${NODE_ECR_URI}:${NODE_ECR_LABEL}
   ${HAPROXY_ECR_URI}:${HAPROXY_ECR_LABEL} ...
===============================================\n\n"
  sleep 5

  $($AWS ecr get-login --region ${AWS_DEFAULT_REGION})
  $DOCKER push  $NODE_ECR_URI:${NODE_ECR_LABEL}
  $DOCKER push  $HAPROXY_ECR_URI:${HAPROXY_ECR_LABEL}

  _finita
}

function cleanup {

  _check_awscli
  _check_vars

  echo -e "
===============================================
:: Removing ${NODE_ECR_NAME} ECR repository ...
===============================================\n\n"
  sleep 2

  $AWS ecr delete-repository --repository-name ${NODE_ECR_NAME} --region ${AWS_DEFAULT_REGION} --force


  echo -e "
===============================================
:: Removing ${HAPROXY_ECR_NAME} ECR repository ...
===============================================\n\n"
  sleep 2

  $AWS ecr delete-repository --repository-name ${HAPROXY_ECR_NAME} --region ${AWS_DEFAULT_REGION} --force

  _finita
}


COMMAND="$1"
case "${COMMAND}" in
  buildnpush)
    buildnpush
    ;;
  cleanup)
    cleanup
    ;;
  *)
    echo "-- ERROR: Invalid command '${COMMAND}'."
    help
    ;;
esac
