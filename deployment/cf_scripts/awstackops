#!/bin/bash -e

MIN_AWS_VERSION="1.10.62"
AWS=$(which aws) || true


function help {
 echo -e "\
  Usage:

    ./awstackops <command> [settings file]

  Commands:
    create_stack
    delete_stack
    help

  Settings file of form:
    export VAR_NAME=VAR_VALUE

  Variables:
    Without defaults:
      STACK_NAME
      MONGODB_URL
      NEWRELIC_KEY
      AWS_SSH_KEY_NAME
      HAPROXY_ECR_NAME
      NODE_ECR_NAME

    With defaults:
      MEMORY_LB             -> 3 Gb
      MEMORY_NODE           -> 3 Gb
      MEMORY_TM             -> 7 Gb
      HAPROXY_ECR_LABEL     -> latest
      NODE_ECR_LABEL        -> latest
      ECS_INSTANCE_TYPE     -> t2.medium
      REDIS_INSTANCE_TYPE   -> cache.m4.large
      ECS_INSTANCE_TYPE_TM  -> m4.xlarge
      ECS_INSTANCE_TYPE_LB  -> t2.medium
      REDIS_PORT            -> 6379
      MAX_CLUSTER_INSTANCES -> 10
      MIN_CLUSTER_INSTANCES -> 2
      DDF_REPO_PATH         -> /home/waffle-server/ddf
      DEFAULT_USER_PASSWORD -> 123
      CF_TEMPLATE           -> ../cloudformation/ws_ecs_cluster_2_az_ecache_single_redis.template
      AWS_DEFAULT_REGION    -> us-east-1

    You can pass these variables throw env or settings file or mixed.
"
  exit 0
}


SETTINGS=$2
if [ "${SETTINGS}x" != "x" ]; then
  source ${SETTINGS}
fi

THRASHING_MACHINE=${THRASHING_MACHINE:-"THRASHING_MACHINE"}
HAPROXY_ECR_LABEL=${HAPROXY_ECR_LABEL:-"latest"}
NODE_ECR_LABEL=${NODE_ECR_LABEL:-"latest"}
ECS_INSTANCE_TYPE_LB=${ECS_INSTANCE_TYPE_LB:-"t2.medium"}
ECS_INSTANCE_TYPE=${ECS_INSTANCE_TYPE:-"t2.medium"}
ECS_INSTANCE_TYPE_TM=${ECS_INSTANCE_TYPE_TM:-"m4.xlarge"}
REDIS_INSTANCE_TYPE=${REDIS_INSTANCE_TYPE:-"cache.m4.large"}
REDIS_PORT=${REDIS_PORT:-"6379"}
MAX_CLUSTER_INSTANCES=${MAX_CLUSTER_INSTANCES:-"10"}
MIN_CLUSTER_INSTANCES=${MIN_CLUSTER_INSTANCES:-"2"}
DDF_REPO_PATH=${DDF_REPO_PATH:-"/home/waffle-server/ddf"}
DEFAULT_USER_PASSWORD=${DEFAULT_USER_PASSWORD:-"123"}



CF_TMPLATE_PATH=${CF_TEMPLATE:-"$(dirname $0)/../cloudformation/ws_ecs_cluster_2_az_ecache_single_redis_treshing.template"}
AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-"us-east-1"}

S3_BUCKET_NAME="${STACK_NAME}-cf-bucket"


function _check_awscli {

  function print_error {
    echo -e "
-- ERROR: 'awscli' is not installed or it's version is too old.
          You can install or upgrade it with 'pip' (python package manager):
            sudo pip install -U awscli
   Exit."
  }

  if [ "${AWS}x" == "x" ]; then
    print_error
    exit 1
  fi

  CURRENT_AWS_VERSION=$(aws --version 2>&1 | awk {'print $1'} | awk -F "/" {'print $2'})
  OLDER_VERSION=$(echo -e "${MIN_AWS_VERSION}\n${CURRENT_AWS_VERSION}" | sort -h | head -n1)
  if [ ${OLDER_VERSION} != ${MIN_AWS_VERSION} ]; then
    print_error
    exit 1
  fi
}


function _check_vars {
  IS_FAILED=false
  for var in MONGODB_URL NEWRELIC_KEY AWS_SSH_KEY_NAME HAPROXY_ECR_NAME NODE_ECR_NAME STACK_NAME; do
    if [ $(env | grep -w $var | wc -l) == "0" ]; then
      IS_FAILED=true
      echo "-- ERROR: '${var}' variable is not set."
    fi
  done
  if $IS_FAILED; then
    echo "Exit."
    exit 1
  fi
}

function _check_stak_name {
  if [ "${STACK_NAME}x" == "x" ]; then
    echo "-- ERROR: 'STACK_NAME' variable is not set. Exit."
    exit 1
  fi
}

function _upload_template_2_s3 {
  $AWS s3 mb "s3://${S3_BUCKET_NAME}"
  $AWS s3 cp ${CF_TMPLATE_PATH} s3://${S3_BUCKET_NAME}/$(basename ${CF_TMPLATE_PATH})
}


function _create_stack {
  STACK_PARAMS_STR="\
ParameterKey=DockerLoadBalancerECRname,ParameterValue=${HAPROXY_ECR_NAME} \
ParameterKey=DockerLoadBalancerECRlabel,ParameterValue=${HAPROXY_ECR_LABEL} \
ParameterKey=DockerNodeECRname,ParameterValue=${NODE_ECR_NAME} \
ParameterKey=DockerNodeECRlabel,ParameterValue=${NODE_ECR_LABEL} \
ParameterKey=SshKeyName,ParameterValue=${AWS_SSH_KEY_NAME} \
ParameterKey=InstanceType,ParameterValue=${ECS_INSTANCE_TYPE} \
ParameterKey=InstanceTypeLb,ParameterValue=${ECS_INSTANCE_TYPE_LB} \
ParameterKey=InstanceTypeThreshingMachine,ParameterValue=${ECS_INSTANCE_TYPE_TM} \
ParameterKey=InstanceTypeECacheRedis,ParameterValue=${REDIS_INSTANCE_TYPE} \
ParameterKey=RedisPort,ParameterValue=${REDIS_PORT} \
ParameterKey=MaxClusterInstances,ParameterValue=${MAX_CLUSTER_INSTANCES} \
ParameterKey=MinClusterInstances,ParameterValue=${MIN_CLUSTER_INSTANCES} \
ParameterKey=MongoDBUrl,ParameterValue=\"${MONGODB_URL}\" \
ParameterKey=NewRelicKey,ParameterValue=${NEWRELIC_KEY} \
ParameterKey=NodeEnv,ParameterValue=${NODE_ENV} \
ParameterKey=DdfRepoPath,ParameterValue=${DDF_REPO_PATH} \
ParameterKey=DefaultUserPassword,ParameterValue=${DEFAULT_USER_PASSWORD} \
ParameterKey=ThrashingMachine,ParameterValue=${THRASHING_MACHINE}"

  $AWS --region ${AWS_DEFAULT_REGION} cloudformation create-stack --stack-name ${STACK_NAME} --template-url https://s3.amazonaws.com/${S3_BUCKET_NAME}/$(basename ${CF_TMPLATE_PATH}) --parameters ${STACK_PARAMS_STR} --disable-rollback --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM

  echo -e "\n::  Waiting for stack creation complete..."
  $AWS cloudformation wait stack-create-complete --stack-name ${STACK_NAME} --region ${AWS_DEFAULT_REGION}
  echo "++ ElasticIP: $($AWS --output json cloudformation describe-stack-resource --stack-name ${STACK_NAME} --region ${AWS_DEFAULT_REGION} --logical-resource-id wsElasticIp | grep PhysicalResourceId | awk -F ": " {'print $2'})"
}


function _remove_s3 {
  $AWS s3 rb s3://${S3_BUCKET_NAME} --force
}


function _finita {
  echo -e "\n
#########################################################

++ FINITA

#########################################################
\n"
}

function create_stack {
  _check_awscli
  _check_vars
  _upload_template_2_s3
  _create_stack
  _finita
}

function delete_stack {
  _check_awscli
  _check_stak_name
  $AWS cloudformation delete-stack --stack-name ${STACK_NAME} --region ${AWS_DEFAULT_REGION}
  echo -e "\n::  Waiting for stack deletion complete..."
  $AWS cloudformation wait stack-delete-complete --stack-name ${STACK_NAME} --region ${AWS_DEFAULT_REGION}
  _remove_s3
  _finita
}


COMMAND=$1
case "${COMMAND}" in
  create_stack)
    create_stack
    ;;
  delete_stack)
    delete_stack
    ;;
  *)
    echo "-- ERROR: Invalid command '${COMMAND}'."
    help
    ;;
esac
